name: app_python

on:
  push:
    branches: [main]

env:
  APP_PATH: ./app_python  # source root
  CODE: main.py  # source code
  TESTS: tests  # package with tests (inside source root)
  
jobs:
    test_lint:
        runs-on: ubuntu-latest
        defaults:
          run:
            working-directory: ${{ env.APP_PATH }}

        env:
          POETRY_VERSION: 1.1.8

        steps:
        - name: Checkout Github repository
          uses: actions/checkout@v2

        - name: Set up Python 3.9
          uses: actions/setup-python@v2
          with:
            python-version: 3.9

        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
        - name: Install dependencies
          run:  poetry install
        - name: Run tests
          run:  poetry run pytest tests
        - name: Run linters
          run:  |
            poetry run pylint main.py
            poetry run isort main.py
    build_image:
        needs: ["lint_test"]
        name: Push Docker image to Docker Hub
        runs-on: ubuntu-latest
        env:
          IMAGE_NAME: simple_app  # name for Docker image
          TAG: latest
        steps:
          - name: Check out the repo
            uses: actions/checkout@v2
            with:
              fetch-depth: 1
          
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v1

          - name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v1
          
          - name: Cache Docker layers
            uses: actions/cache@v2
            with:
              path: /tmp/.buildx-cache
              key: ${{ runner.os }}-buildx-${{ github.sha }}
              restore-keys: |
                ${{ runner.os }}-buildx-
          
          - name: Log in to Docker Hub
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Build and push
            uses: docker/build-push-action@v2
            with:
              context: ./app_python
              builder: ${{ steps.buildx.outputs.name }}
              push: true
              tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
              cache-from: type=local,src=/tmp/.buildx-cache
              cache-to: type=local,dest=/tmp/.buildx-cache-new
          
          # - name: Scan Docker image
          #   run: docker scan ${{ env.IMAGENAME }}/${{ env.WORKINGDIR }}:${{ env.TAG }}
        
